# You can add or remove any of these fields
# The variables have to comply with CF conventions where applicable:
# https://cfconventions.org/Data/cf-standard-names/current/build/cf-standard-name-table.html

global:
  # GENERAL
  deployment_datetime: "2023-01-23T01:23:45Z" # Fill by hand for now
  acknowledgment: "ACKNOWLEDGEMENT"
  comment: "COMMENTS"
  contributor_name: "PERSON1, PERSON2, PERSON3"
  contributor_role: "Principal Investigator,Glider Pilot,Glider Pilot,Technician,Data Management"
  creator_institution: "UNIVERSITY"
  creator_name: "PERSON1"
  creator_email: "SOME.ONE@ABC.XYZ"
  creator_type: "person"
  creator_url: "https://mungliders.com/"
  publisher_name: "PUBLISHER"
  publisher_url: "URL"
  institution: "Memorial University"
  program: "MUN"
  naming_authority: "mungliders.com"
  project: "PROJECT NAME"
  processing_level: "Delayed-mode/recovered raw Slocum glider dataset from the native data file format. No quality control provided."
  publisher_email: "SOME.ONE.ELSE@ABC.XYZ"
  publisher_institution: "Memorial University"
  summary: "SOMETHING"
  Conventions: "CONVENTIONS"
  Metadata_Conventions: "METADATA CONVENTIONS"
  history: "HISTORY"
  keywords: "AUVS > Autonomous Underwater Vehicles, Oceans > Ocean Pressure > Water Pressure, Oceans > Ocean Temperature > Water Temperature, Oceans > Salinity/Density > Conductivity, Oceans > Salinity/Density > Density, Oceans > Salinity/Density > Salinity"
  keywords_vocabulary: "GCMD Science Keywords"
  metadata_link: "https://mungliders.com/missions"
  naming_authority: "mungliders.com"

  # SENSORS
  instrument: "In Situ/Laboratory Instruments > Profilers/Sounders > CTD"
  oxygen_sensor_type: "Aanderaa 4831"
  oxygen_sensor_serial_number: "673"
  ctd_type: "RBR Legato"
  ctd_serial_number: "203790"
  optical_sensor_type: "FLBBCD-SLC"
  optical_sensor_serial_number: "5765"

  # GEOSPATIAL
  geospatial_bounds_crs: "EPSG:4326"
  geospatial_bounds_vertical_crs: "EPSG:5831"
  geospatial_lat_resolution: "0.00001 degree"
  geospatial_lat_units: "degree_north"
  geospatial_lon_resolution: "0.00001 degree"
  geospatial_lon_units: "degree_east"
  geospatial_vertical_positive: "down"
  geospatial_vertical_resolution: ""
  geospatial_vertical_units: "EPSG:5831"
  sea_name: "North Atlantic Ocean"

  # OTHERS
  product_version: "1.0"
  standard_name_vocabulary: "CF Standard Name Table v27"
  geospatial_verical_resolution: "0"
  time_coverage_resolution: "1 sec"
  ncei_template_version: "NCEI_NetCDF_Trajectory_Template_v2.0"
  license: "This data may be redistributed without restriction. Data provided as is with no expressed or implied assurance of quality assurance or quality control"
  references: "https://ioos.noaa.gov/wp-content/uploads/2015/10/Manual-for-QC-of-Glider-Data_05_09_16.pdf"
  format_version: "1.0.0"

# CTD
instrument_ctd:
  _FillValue: -999
  long_name: "RBR Glider Payload CTD"
  calibration_date: "YYYY-mm-ddTHH:MM:SSZ"
  calibration_report: ""
  comment: "unpumped CTD" # pumped (Seabird CTD) || unpumped (RBR Legato 6)
  factory_calibrated: "YYYY-mm-ddTHH:MM:SSZ"
  make_model: "RBR Legato 6"
  platform: "platform"
  serial_number: ""
  type: "platform"


###############################
# DO NOT EDIT BEYOND THIS POINT
CFnamelist:
  time:
    standard_name: "time"
    long_name: "Time"
    units: "seconds since 1970-01-01T00:00:00Z"
    calendar: "gregorian"
    observation_type: "measured"
    comment: "glider time record seconds since 1970. Time is merged time between glider flight and science computers"
  lat:
    standard_name: "latitude"
    long_name: "latitude"
    units: "degree_north"
    comment: "glider platform latitude incorporating underwater positioning corrected for dead reckoninig errors associated with underwater currents and glider GPS surface positions"
    ancillary_variables: "m_gps_lat"
    coordinate_reference_frame: ""
    observation_type: "measured"
    platform: "platform"
    reference: ""
    valid_max: "** COMMAND:np.nanmax(nc['lat'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['lat'].data)"
  lon:
    standard_name: "longitude"
    long_name: "longitude"
    units: "degree_east"
    comment: "glider platform longitude incorporating underwater positioning corrected for dead reckoninig errors associated with underwater currents and glider GPS surface positions"
    ancillary_variables: "m_gps_lon"
    coordinate_reference_frame: ""
    observation_type: "measured"
    platform: "platform"
    reference: ""
    valid_max: "** COMMAND:np.nanmax(nc['lon'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['lon'].data)"
  pressure:
    standard_name: "pressure"
    long_name: "sea_water_pressure"
    units: "dbar"
    accuracy: ""
    ancillary_variables: ""
    instrument: "instrument_ctd"
    observation_type: "measured"
    platform: "platform"
    positive: "down"
    reference_datum: "sea-surface"
    precision: "** COMMAND:np.nanmedian(np.diff(nc['pressure'].data))"
    resolution: "** COMMAND:np.nanmedian(np.diff(nc['time'].data[~np.isnan(nc['pressure'])]))"
    valid_max: "** COMMAND:np.nanmax(nc['pressure'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['pressure'].data)"
    comment: "measured by glider CTD pressure sensor"
  depth:
    standard_name: "depth"
    long_name: "depth"
    units: "meter"
    accuracy: ""
    ancillary_variables: "sci_water_pressure"
    instrument: "instrument_ctd"
    observation_type: "calculated"
    platform: "platform"
    positive: "down"
    reference_datum: "sea-surface"
    precision: "** COMMAND:np.nanmedian(np.diff(nc['depth'].data))"
    resolution: "** COMMAND:np.nanmedian(np.diff(nc['time'].data[~np.isnan(nc['density'])]))"
    valid_max: "** COMMAND:np.nanmax(nc['depth'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['depth'].data)"
    comment: "vertical distance below sea surface calculated from CTD pressure sensor sci_water_pressure"
  # profile_index:
  #   standard_name: "profile_index"
  #   long_name: "glider_dive_profile_index"
  #   units: ""
  #   comment: "profile index computed from glider CTD depth to extract profiles for identifying valid profiles in the glider record, based on the SOCIB toolbox. The output has integers for valid profiles (dive or climb) and fractions denote in-between dive states or hovering states"
  # profile_direction:
  #   standard_name: "profile_direction"
  #   long_name: "glider_dive_profile_direction"
  #   units: " "
  #   comment: "profile direction indicating dive (-1) or climb (+1)"
  v:
    standard_name: "northward_sea_water_velocity"
    long_name: "northward_sea_water_velocity"
    units: "m s-1"
    comment: "measured depth-average of sea water velocity pointing positive North, computed as an average over a glider dive segement between surfacing locations. The value comes from m_water_final_vy"
  u:
    standard_name: "eastward_sea_water_velocity"
    long_name: "eastward_sea_water_velocity"
    units: "m s-1"
    comment: "measured depth-average of sea water velocity pointing positive East, computed as an average over a glider dive segement between surfacing locations. The value comes from m_water_final_vx"
  conductivity:
    standard_name: "sea_water_electrical_conductivity"
    long_name: "sea_water_electrical_conductivity"
    units: "S m-1"
    accuracy: ""
    ancillary_variables: "sci_water_cond"
    instrument: "instrument_ctd"
    observation_type: "measured"
    platform: "platform"
    precision: "** COMMAND:np.nanmedian(np.diff(nc['conductivity'].data))"
    resolution: "** COMMAND:np.nanmedian(np.diff(nc['time'].data[~np.isnan(nc['conductivity'])]))"
    valid_max: "** COMMAND:np.nanmax(nc['conductivity'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['conductivity'].data)"
    comment: "ambient seawater conductivity measured by glider CTD sensor sci_water_cond"
  temperature:
    standard_name: "sea_water_temperature"
    long_name: "sea_water_temperature"
    units: "degrees_C"
    accuracy: ""
    ancillary_variables: "sci_water_temp"
    instrument: "instrument_ctd"
    observation_type: "measured"
    platform: "platform"
    precision: "** COMMAND:np.nanmedian(np.diff(nc['temperature'].data))"
    resolution: "** COMMAND:np.nanmedian(np.diff(nc['time'].data[~np.isnan(nc['temperature'])]))"
    valid_max: "** COMMAND:np.nanmax(nc['temperature'])"
    valid_min: "** COMMAND:np.nanmin(nc['temperature'])"
    comment: "ambient seawater temperature measured by glider CTD sensor sci_water_temp"
  salinity:
    standard_name: "salinity"
    long_name: "sea_water_practical_salinity"
    units: "PSU"
    comment: "practical salinity computed from conductivity, temperature and pressure using the Gibbs-SeaWater (GSW) Oceanographic toolbox {https://www.teos-10.org/software.htm}"
  density:
    standard_name: "sea_water_density"
    long_name: "sea_water_density"
    units: "kg m-3"
    accuracy: ""
    ancillary_variables: "sci_water_cond,sci_water_pressure,sci_water_temp"
    instrument: "instrument_ctd"
    observation_type: "calculated"
    platform: "platform"
    precision: "** COMMAND:np.nanmedian(np.diff(nc['density'].data))"
    resolution: "** COMMAND:np.nanmedian(np.diff(nc['time'].data[~np.isnan(nc['density'])]))"
    valid_max: "** COMMAND:np.nanmax(nc['density'].data)"
    valid_min: "** COMMAND:np.nanmin(nc['density'].data)"
    comment: "in-situ seawater density calculated from salinity, temperature and pressure using the Gibbs-SeaWater (GSW) Oceanographic toolbox {https://www.teos-10.org/software.htm}"
  oxygen_sensor_temperature:
    standard_name: "oxygen_sensor_temperature"
    long_name: "temperature_of_sensor_for_oxygen_in_sea_water"
    units: "degree_C"
    comment: "temperature of oxygen sensor used to compute oxygen concentration duplicated from sci_oxy4_temperature"
  oxygen_concentration:
    standard_name: "oxygen_concentration"
    long_name: "mole_concentration_of_dissolved_molecular_oxygen_in_sea_water"
    units: "micro-mol L"
    comment: "oxygen concentration measured by glider sensor from sci_oxy4_oxygen, compensated for salinity using code from Henry Bittig."
  # GLIDER FLIGHT COMPUTER VARIABLES
  c_ballast_pumped:
    standard_name: "c_ballast_pumped"
    long_name: "commanded_glider_ballast_pumped"
    units: "cm3"
    comment: "-negative is subtraction / + addition"
  c_battpos:
    standard_name: "c_battpos"
    long_name: "commanded_glider_pitch_battery_position"
    units: "in"
    comment: "-negative is towards aft and +positive is towards nose"
  c_de_oil_volume:
    standard_name: "c_de_oil_volume"
    long_name: "commanded_glider_oil_ballast_pumped"
    units: "cm3"
    comment: "-negative is subtraction / + addition"
  c_fin:
    standard_name: "c_fin"
    long_name: "commanded_glider_rudder_angle"
    units: "degree"
    comment: "-negative is port / + starboard"
  m_fin:
    standard_name: "m_fin"
    long_name: "measured_glider_roll"
    units: "degree"
    comment: "-negative is port / + starboard"
  c_heading:
    standard_name: "c_heading"
    long_name: "commanded_glider_heading_angle"
    units: "degree"
    comment: "-negative is port / + starboard"
  c_pitch:
    standard_name: "c_pitch"
    long_name: "commanded_glider_pitch_angle"
    units: "degree"
    comment: "-negative is nose down / + is up"
  c_wpt_lat:
    standard_name: "c_wpt_lat"
    long_name: "commanded_glider_target_waypoint_latitude"
    units: "degree_north"
    comment: "decimal degrees North WGS84 (+90/-90)"
  c_wpt_lon:
    standard_name: "c_wpt_lon"
    long_name: "commanded_glider_target_waypoint_longitude"
    units: "degree_east"
    comment: "decimal degrees East WGS84 (+180/-180)"
  m_ballast_pumped:
    standard_name: "m_ballast_pumped"
    long_name: "measured_glider_ballast_pumped"
    units: "cm3"
    comment: "-negative is subtraction / + addition"
  m_battpos:
    standard_name: "m_battpos"
    long_name: "measured_glider_pitch_battery_position"
    units: "in"
    comment: "-negative is towards aft and +positive is towards nose"
  m_de_oil_volume:
    standard_name: "m_de_oil_volume"
    long_name: "measured_glider_oil_ballast_pumped"
    units: "cm3"
    comment: "-negative is subtraction / + addition"
  m_fin:
    standard_name: "m_fin"
    long_name: "measured_glider_rudder_angle"
    units: "degree"
    comment: "-negative is port / + starboard"
  m_heading:
    standard_name: "m_heading"
    long_name: "measured_glider_heading_angle"
    units: "degree"
    comment: "-negative is port / + starboard"
  m_pitch:
    standard_name: "m_pitch"
    long_name: "measured_glider_pitch_angle"
    units: "degree"
    comment: "-negative is nose down / + is up"
  m_altitude:
    standard_name: "m_altitude"
    long_name: "measured_glider_altitude_above_bottom"
    units: "meter"
    comment: ""
  m_battery:
    standard_name: "m_battery"
    long_name: "measured_glider_main_battery_voltage"
    units: "volts"
    comment: ""
  m_pressure:
    standard_name: "m_pressure"
    long_name: "measured_glider_pressured_sensor_reading"
    units: "bar"
    comment: "measured by glider aft-cap MICRON pressure transducer"
  m_depth:
    standard_name: "m_depth"
    long_name: "measured_glider_depth_readings"
    units: "meter"
    comment: "depth is computed from m_pressure"
  m_water_depth:
    standard_name: "m_water_depth"
    long_name: "measured_glider_water_depth"
    units: "meter"
    comment: "depth is computed from adding m_depth+m_altitude"
  m_gps_lat:
    standard_name: "m_gps_lat"
    long_name: "measured_glider_gps_latitude"
    units: "degree_north"
    comment: "decimal degrees North WGS84 (+90/-90), recorded by glider at surface"
  m_gps_lon:
    standard_name: "m_gps_lon"
    long_name: "measured_glider_gps_longitude"
    units: "degree_east"
    comment: "decimal degrees East WGS84 (+180/-180), recorded by glider at surface"
  m_lat:
    standard_name: "m_lat"
    long_name: "measured_glider_dead_reckoned_latitude"
    units: "degree_north"
    comment: "decimal degrees North WGS84 (+90/-90), recorded using glider compass"
  m_lon:
    standard_name: "m_lon"
    long_name: "measured_glider_dead_reckoned_longitude"
    units: "degree_east"
    comment: "decimal degrees East WGS84 (+180/-180), recorded using glider compass"
  m_water_vy:
    standard_name: "m_water_vy"
    long_name: "measured_glider_northward_water_velocity"
    units: "m s-1"
    comment: ""
  m_water_vx:
    standard_name: "m_water_vx"
    long_name: "measured_glider_eastward_water_velocity"
    units: "m s-1"
    comment: ""
  m_final_water_vy:
    standard_name: "m_final_water_vy"
    long_name: "measured_final_glider_northward_water_velocity"
    units: "m s-1"
    comment: ""
  m_final_water_vx:
    standard_name: "m_final_water_vx"
    long_name: "measured_final_glider_eastward_water_velocity"
    units: "m s-1"
    comment: ""
  m_initial_water_vy:
    standard_name: "m_initial_water_vy"
    long_name: "measured_initial_glider_northward_water_velocity"
    units: "m s-1"
    comment: ""
  m_initial_water_vx:
    standard_name: "m_initial_water_vx"
    long_name: "measured_initial_glider_eastward_water_velocity"
    units: "m s-1"
    comment: ""
  x_dr_state:
    standard_name: "x_dr_state"
    long_name: "estimated_glider_dead_reckoning_state"
    units: "enum"
    comment: "this variable contains the glider states (surfacing=2, about to surface=1, about to dive =3, diving=4) which can be used to parse apart the glider gps locations for dead-reckoning error estimation and correction of the measured glider compass underwater positions."
  m_present_time:
    standard_name: "m_present_time"
    long_name: "measured_glider_flight_computer_time"
    units: "s"
    comment: "seconds since 1970, epoch time stamp on glider flight computer for all glider flight computer variables and sensors"
  # GLIDER SCIENCE COMPUTER VARIABLES
  sci_m_present_time:
    standard_name: "sci_m_present_time"
    long_name: "science_measured_glider_science_computer_time"
    units: "s"
    comment: "seconds since 1970, epoch time stamp on glider science computer for all glider science variables and sensors"
  sci_m_science_on:
    standard_name: "sci_m_science_on"
    long_name: "science_measured_glider_science_computer_state"
    units: "enum"
    comment: "off=0, on=1"
  sci_water_cond:
    standard_name: "sci_water_cond"
    long_name: "science_measured_sea_water_electrical_conductivity"
    units: "S m-1"
    comment: "  "
  sci_water_pressure:
    standard_name: "sci_water_pressure"
    long_name: "science_measured_sea_water_pressure"
    units: "dbar"
    comment: ""
  sci_water_temp:
    standard_name: "sci_water_temp"
    long_name: "science_measured_sea_water_temperature"
    units: "degree_C"
    comment: ""
  sci_water_salinity:
    standard_name: "sci_water_salinity"
    long_name: "science_computed_sea_water_practical_salinity"
    units: "PSU"
    comment: "from sci_water_temp, sci_water_cond, sci_water_pressure"
  # RBR CTD
  sci_rbrctd_cond_cell_temp_00:
    standard_name: "sci_rbrctd_cond_cell_temp_00"
    long_name: "rbr_ctd_temperature_of_conductivity_cell"
    units: "degree_C"
    comment: "internal temperature of the RBR conductivity cell used for correcting salinity and temperature in post-processing"
  sci_rbrctd_conductivity_00:
    standard_name: "sci_rbrctd_conductivity_00"
    long_name: "rbr_ctd_conductivity_of_conductivity_cell"
    units: "S m-1"
    comment: "conductivity of the RBR conductivity cell used for correcting salinity and temperature in post-processing"
  sci_rbrctd_temperature_00:
    standard_name: "sci_rbrctd_temperature_00"
    long_name: "rbr_ctd_thermistor_temperature"
    units: "degree_C"
    comment: "temperature readings of the external RBR thermistor measuring ambient seawater temperature"
  sci_rbrctd_seapressure_00:
    standard_name: "sci_rbrctd_seapressure_00"
    long_name: "rbr_ctd_sea_water_pressure"
    units: "dbar"
    comment: "used in sci_water_pressure"
  sci_rbrctd_salinity_00:
    standard_name: "sci_rbrctd_salinity_00"
    long_name: "rbr_ctd_computed_practical_salinity"
    units: "PSU"
    comment: "salinity computed by RBR CTD from temperature, pressure and conductivity"
  # Oxygen Optode
  sci_oxy4_calphase:
    standard_name: "sci_oxy4_calphase"
    long_name: "oxygen_optode_calibrated_phase_readings"
    units: "degree"
    comment: "temperature calibrated and compensated phase angle output of the oxygen optode used in the 7 foil coeffiecients SVU Formula Uchida et al. (2008) to compute oxygen."
  sci_oxy4_tcphase:
    standard_name: "sci_oxy4_tcphase"
    long_name: "oxygen_optode_temperature_compensated_phase_readings"
    units: "degree"
    comment: "temperature compensated phase angle output of the oxygen optode. Input is used in the 4x7 coefficient oxygen foil model to compute the oxygen concentration from temperature and tcphase."
  sci_oxy4_oxygen:
    standard_name: "sci_oxy4_oxygen"
    long_name: "oxygen_optode_molar_oxygen_concentration"
    units: "micro-mol L"
    comment: "oxygen concentration of the glider optode sensor computed internally from sci_oxy4_calphase and sci_oxy4_temp but not compensated for varying salinity. Salinity is set internaly to S=0 PSU"
  sci_oxy4_temp:
    standard_name: "sci_oxy4_temp"
    long_name: "oxygen_optode_temperature"
    units: "degree_C"
    comment: "oxygen sensor thermistor readings"
  sci_oxy4_saturation:
    standard_name: "sci_oxy4_saturation"
    long_name: "oxygen_optode_sea_water_saturation"
    units: "1"
    comment: "oxygen sensor seawater saturation computed internally from thermistor readings sci_oxy4_temp using forumlae from Benson and Krause (1984), as fitted by Garcia and Gordon (1992, 1993), but not accounting for salinity"
