% ------------------------------------------------------------------------------
% Create netCDF global attributes described in a definition structure.
%
% SYNTAX :
%  [o_ncFileId] = gl_create_nc_global_atts( ...
%    a_ncFileId, a_globalAttsDefStruct, ...
%    a_tabVarName, a_tabVarInput, a_inputData, a_updateDate)
%
% INPUT PARAMETERS :
%   a_ncFileId            : input netCDF file Id
%   a_globalAttsDefStruct : global attributes definition structure
%   a_tabVarName          : input variable names
%   a_tabVarInput         : input variable filling rules
%   a_inputData           : input data
%   a_updateDate          : nc file update date
%   a_adjVarList          : list of variables with adjusted data
%
% OUTPUT PARAMETERS :
%   o_ncFileId : output netCDF file Id
%
% EXAMPLES :
%
% SEE ALSO :
% AUTHORS  : Jean-Philippe Rannou (Altran)(jean-philippe.rannou@altran.com)
% ------------------------------------------------------------------------------
% RELEASES :
%   06/04/2013 - RNU - creation
% ------------------------------------------------------------------------------
function [o_ncFileId] = gl_create_nc_global_atts( ...
   a_ncFileId, a_globalAttsDefStruct, ...
   a_tabVarName, a_tabVarInput, a_inputData, a_updateDate, a_adjVarList)

% output data initialization
o_ncFileId = a_ncFileId;

% decoder version
global g_decGl_decoderVersion;

% flag for HR data
global g_decGl_hrDataFlag;


% retrieve geospatial and time information to fill the attribute values which
% depend on data stored in the netCDF file
latitude = [];
idLat = find(strcmp(a_tabVarName, 'LATITUDE') == 1);
if (~isempty(idLat))
   varInput = char(a_tabVarInput{idLat});
   if (~isempty(varInput))
      [fieldExists, latitude] = gl_check_field(a_inputData, varInput);
   end
end
longitude = [];
idLon = find(strcmp(a_tabVarName, 'LONGITUDE') == 1);
if (~isempty(idLon))
   varInput = char(a_tabVarInput{idLon});
   if (~isempty(varInput))
      [fieldExists, longitude] = gl_check_field(a_inputData, varInput);
   end
end
depth = [];
idDepth = find(strcmp(a_tabVarName, 'DEPTH') == 1);
if (~isempty(idDepth))
   varInput = char(a_tabVarInput{idDepth});
   if (~isempty(varInput))
      [fieldExists, depth] = gl_check_field(a_inputData, varInput);
   end
end
idPres = find(strcmp(a_tabVarName, 'PRES') == 1);
if (~isempty(idPres))
   varInput = char(a_tabVarInput{idPres});
   if (~isempty(varInput))
      [fieldExists, pres] = gl_check_field(a_inputData, varInput);
      depth = [depth pres];
   end
end
time = [];
idTime = find(strcmp(a_tabVarName, 'TIME') == 1);
if (~isempty(idTime))
   varInput = char(a_tabVarInput{idTime});
   if (~isempty(varInput))
      [fieldExists, time] = gl_check_field(a_inputData, varInput);
   end
end
idTimeGps = find(strcmp(a_tabVarName, 'TIME_GPS') == 1);
if (~isempty(idTimeGps))
   varInput = char(a_tabVarInput{idTimeGps});
   if (~isempty(varInput))
      [fieldExists, timeGps] = gl_check_field(a_inputData, varInput);
      time = [time timeGps];
   end
end

% create nc global attributes
epoch_offset = datenum(1970, 1, 1) - datenum(0000, 1, 0);
globalVarId = netcdf.getConstant('NC_GLOBAL');
fieldNames = fieldnames(a_globalAttsDefStruct);
for id = 1:length(fieldNames)
   attName = fieldNames{id};
   attValue = a_globalAttsDefStruct.(attName);
   switch (attName)
      case 'date_update'
         attValue = datestr(a_updateDate, 'yyyy-mm-ddTHH:MM:SSZ');
      case 'history'
         attValue = [datestr(a_updateDate, 'yyyy-mm-ddTHH:MM:SSZ') ' Generated by Matlab gl_co_writer.m'];
      case 'data_mode'
         if (~isempty(a_adjVarList))
            attValue = 'A';
         end
         if (g_decGl_hrDataFlag == 1)
            attValue = 'P';
         end
      case 'geospatial_lat_min'
         attValue = num2str(min(latitude));
      case 'geospatial_lat_max'
         attValue = num2str(max(latitude));
      case 'geospatial_lon_min'
         attValue = num2str(min(longitude));
      case 'geospatial_lon_max'
         attValue = num2str(max(longitude));
      case 'geospatial_vertical_min'
         attValue = num2str(min(depth));
      case 'geospatial_vertical_max'
         attValue = num2str(max(depth));
      case 'time_coverage_start'
         attValue = datestr((min(time)/86400) + epoch_offset, 'yyyy-mm-ddTHH:MM:SSZ');
      case 'time_coverage_end'
         attValue = datestr((max(time)/86400) + epoch_offset, 'yyyy-mm-ddTHH:MM:SSZ');
      case 'authors'
         authors = [];
         for idA = 1:length(attValue)
            authors = [authors attValue(idA).first_name ' ' attValue(idA).last_name ';'];
         end
         if (~isempty(authors))
            authors = authors(1:end-1);
         end
         attValue = authors;
      case 'data_processing_chain_version'
         attValue = g_decGl_decoderVersion;
   end
   netcdf.putAtt(a_ncFileId, globalVarId, attName, attValue);
end

return
