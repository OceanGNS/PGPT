% ------------------------------------------------------------------------------
% Read a NetCDF EGO file contents.
%
% SYNTAX :
%  [o_dimensions, o_globalAttributes, o_gliderCharData, ...
%    o_gliderDeployData, o_gpsData, o_timeData, o_paramList, ...
%    o_measData, o_currentData, o_sensorData, o_paramData, ...
%    o_histoData, o_derivData] = gl_read_file_ego(a_inputPathFileName)
%
% INPUT PARAMETERS :
%   a_inputPathFileName : EGO file path name
%
% OUTPUT PARAMETERS :
%   o_dimensions       : dimension data
%   o_globalAttributes : global attribute data
%   o_gliderCharData   : glider characteristics data
%   o_gliderDeployData : glider deployment data
%   o_gpsData          : GPS data
%   o_timeData         : time data
%   o_paramList        : parameter list
%   o_measData         : measurement data
%   o_currentData      : estimated current data
%   o_sensorData       : sensor data
%   o_paramData        : parameter data
%   o_histoData        : history data
%   o_derivData        : derivation data
%
% EXAMPLES :
%
% SEE ALSO :
% AUTHORS  : Jean-Philippe Rannou (Altran)(jean-philippe.rannou@altran.com)
% ------------------------------------------------------------------------------
% RELEASES :
%   04/11/2016 - RNU - creation
% ------------------------------------------------------------------------------
function [o_dimensions, o_globalAttributes, o_gliderCharData, ...
   o_gliderDeployData, o_gpsData, o_timeData, o_paramList, ...
   o_measData, o_currentData, o_sensorData, o_paramData, ...
   o_histoData, o_derivData] = gl_read_file_ego(a_inputPathFileName)

o_dimensions = [];
o_globalAttributes = [];
o_gliderCharData = [];
o_gliderDeployData = [];
o_gpsData = [];
o_timeData = [];
o_paramList = [];
o_measData = [];
o_currentData = [];
o_sensorData = [];
o_paramData = [];
o_histoData = [];
o_derivData = [];

% check the NetCDF file
if ~(exist(a_inputPathFileName, 'file') == 2)
   fprintf('File not found : %s\n', a_inputPathFileName);
   return
end

% open NetCDF file
fCdf = netcdf.open(a_inputPathFileName, 'NC_NOWRITE');
if (isempty(fCdf))
   fprintf('ERROR: Unable to open NetCDF input file: %s\n', a_inputPathFileName);
   return
end

% retrieve dimensions
dimList = [ ...
   {'TIME'} ...
   {'TIME_GPS'} ...
   {'TIME_CURRENT'} ...
   {'N_SENSOR'} ...
   {'N_PARAM'} ...
   {'N_DERIVATION'} ...
   {'N_POSITIONING_SYSTEM'} ...
   {'N_TRANS_SYSTEM'} ...
   {'N_HISTORY'} ...
   ];
for id = 1:length(dimList)
   name = dimList{id};
   if (gl_dim_is_present(fCdf, name))
      [~, value] = netcdf.inqDim(fCdf, netcdf.inqDimID(fCdf, name));
      o_dimensions = [o_dimensions {name} {value}];
   else
      o_dimensions = [o_dimensions {name} {[]}];
   end
end

% retrieve global attributes
[nbDims, nbVars, nbGAtts, unlimId] = netcdf.inq(fCdf);
for id = 0:nbGAtts-1
   name = netcdf.inqAttName(fCdf, netcdf.getConstant('NC_GLOBAL'), id);
   value = netcdf.getAtt(fCdf, netcdf.getConstant('NC_GLOBAL'), name);
   o_globalAttributes = [o_globalAttributes {name} {value}];
end

% retrieve glider characteristics data
gliderCharList = [ ...
   {'PLATFORM_FAMILY'} ...
   {'PLATFORM_TYPE'} ...
   {'PLATFORM_MAKER'} ...
   {'GLIDER_SERIAL_NO'} ...
   {'GLIDER_OWNER'} ...
   {'OPERATING_INSTITUTION'} ...
   {'WMO_INST_TYPE'} ...
   {'POSITIONING_SYSTEM'} ...
   {'TRANS_SYSTEM'} ...
   {'TRANS_SYSTEM_ID'} ...
   {'TRANS_FREQUENCY'} ...
   {'BATTERY_TYPE'} ...
   {'BATTERY_PACKS'} ...
   {'SPECIAL_FEATURES'} ...
   {'FIRMWARE_VERSION_NAVIGATION'} ...
   {'FIRMWARE_VERSION_SCIENCE'} ...
   {'GLIDER_MANUAL_VERSION'} ...
   {'ANOMALY'} ...
   {'CUSTOMIZATION'} ...
   {'DAC_FORMAT_ID'} ...
   ];
for id = 1:length(gliderCharList)
   name = gliderCharList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_gliderCharData = [o_gliderCharData {name} {value}];
   else
      o_gliderCharData = [o_gliderCharData {name} {[]}];
   end
end

% retrieve glider deployment data
gliderDeployList = [ ...
   {'DEPLOYMENT_START_DATE'} ...
   {'DEPLOYMENT_START_LATITUDE'} ...
   {'DEPLOYMENT_START_LONGITUDE'} ...
   {'DEPLOYMENT_START_QC'} ...
   {'DEPLOYMENT_PLATFORM'} ...
   {'DEPLOYMENT_CRUISE_ID'} ...
   {'DEPLOYMENT_REFERENCE_STATION_ID'} ...
   {'DEPLOYMENT_END_DATE'} ...
   {'DEPLOYMENT_END_LATITUDE'} ...
   {'DEPLOYMENT_END_LONGITUDE'} ...
   {'DEPLOYMENT_END_QC'} ...
   {'DEPLOYMENT_END_STATUS'} ...
   {'DEPLOYMENT_OPERATOR'} ...
   ];
for id = 1:length(gliderDeployList)
   name = gliderDeployList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_gliderDeployData = [o_gliderDeployData {name} {value}];
   else
      o_gliderDeployData = [o_gliderDeployData {name} {[]}];
   end
end

% retrieve GPS data
gpsList = [ ...
   {'TIME_GPS'} ...
   {'TIME_GPS_QC'} ...
   {'LATITUDE_GPS'} ...
   {'LONGITUDE_GPS'} ...
   {'POSITION_GPS_QC'} ...
   ];
for id = 1:length(gpsList)
   name = gpsList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_gpsData = [o_gpsData {name} {value}];
   else
      o_gpsData = [o_gpsData {name} {[]}];
   end
end

% retrieve TIME data
timeList = [ ...
   {'TIME'} ...
   {'TIME_QC'} ...
   {'LATITUDE'} ...
   {'LONGITUDE'} ...
   {'POSITION_QC'} ...
   {'POSITIONING_METHOD'} ...
   {'PHASE'} ...
   {'PHASE_NUMBER'} ...   
   ];
for id = 1:length(timeList)
   name = timeList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_timeData = [o_timeData {name} {value}];
   else
      o_timeData = [o_timeData {name} {[]}];
   end
end

% retrieve measurement data
if (gl_var_is_present(fCdf, 'PARAMETER'))
   param = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, 'PARAMETER'));
   o_paramList = [];
   for id = 1:size(param, 2)
      o_paramList = [o_paramList {strtrim(param(:, id)')}];
   end
   o_paramList = unique(o_paramList, 'stable');
   
   for id = 1:length(o_paramList)
      for idLoop = 1:2 % for <PARAM> and <PARAM>_ADJUSTED
         name = o_paramList{id};
         if (idLoop == 2)
            name = [name '_ADJUSTED'];
         end
         if (gl_var_is_present(fCdf, name))
            value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
            o_measData = [o_measData {name} {value}];
         else
            o_measData = [o_measData {name} {[]}];
         end
         name = [name '_QC'];
         if (gl_var_is_present(fCdf, name))
            value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
            o_measData = [o_measData {name} {value}];
         else
            o_measData = [o_measData {name} {[]}];
         end
      end
   end
end

% retrieve estimated current data
currentList = [ ...
   {'WATERCURRENTS_TIME'} ...
   {'WATERCURRENTS_LATITUDE'} ...
   {'WATERCURRENTS_LONGITUDE'} ...
   {'WATERCURRENTS_DEPTH'} ...
   {'WATERCURRENTS_U'} ...
   {'WATERCURRENTS_V'} ...
   ];
for id = 1:length(currentList)
   name = currentList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_currentData = [o_currentData {name} {value}];
   else
      o_currentData = [o_currentData {name} {[]}];
   end
end

% retrieve sensor data
sensorList = [ ...
   {'SENSOR'} ...
   {'SENSOR_MAKER'} ...
   {'SENSOR_MODEL'} ...
   {'SENSOR_SERIAL_NO'} ...
   {'SENSOR_MOUNT'} ...
   {'SENSOR_ORIENTATION'} ...
   ];
for id = 1:length(sensorList)
   name = sensorList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_sensorData = [o_sensorData {name} {value}];
   else
      o_sensorData = [o_sensorData {name} {[]}];
   end
end

% retrieve parameter data
parameterList = [ ...
   {'PARAMETER'} ...
   {'PARAMETER_SENSOR'} ...
   {'PARAMETER_DATA_MODE'} ...
   {'PARAMETER_UNITS'} ...
   {'PARAMETER_ACCURACY'} ...
   {'PARAMETER_RESOLUTION'} ...
   ];
for id = 1:length(parameterList)
   name = parameterList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_paramData = [o_paramData {name} {value}];
   else
      o_paramData = [o_paramData {name} {[]}];
   end
end

% retrieve HISTORY information
historyList = [ ...
   {'HISTORY_INSTITUTION'} ...
   {'HISTORY_STEP'} ...
   {'HISTORY_SOFTWARE'} ...
   {'HISTORY_SOFTWARE_RELEASE'} ...
   {'HISTORY_REFERENCE'} ...
   {'HISTORY_DATE'} ...
   {'HISTORY_ACTION'} ...
   {'HISTORY_PARAMETER'} ...
   {'HISTORY_PREVIOUS_VALUE'} ...
   {'HISTORY_START_TIME_INDEX'} ...
   {'HISTORY_STOP_TIME_INDEX'} ...
   {'HISTORY_QCTEST'} ...
   ];
for id = 1:length(historyList)
   name = historyList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_histoData = [o_histoData {name} {value}];
   else
      o_histoData = [o_histoData {name} {[]}];
   end
end

% retrieve DERIVATION information
derivationList = [ ...
   {'DERIVATION_PARAMETER'} ...
   {'DERIVATION_EQUATION'} ...
   {'DERIVATION_COEFFICIENT'} ...
   {'DERIVATION_COMMENT'} ...
   {'DERIVATION_DATE'} ...
   ];
for id = 1:length(derivationList)
   name = derivationList{id};
   if (gl_var_is_present(fCdf, name))
      value = netcdf.getVar(fCdf, netcdf.inqVarID(fCdf, name));
      o_derivData = [o_derivData {name} {value}];
   else
      o_derivData = [o_derivData {name} {[]}];
   end
end

netcdf.close(fCdf);

return
